pip install fastapi[all] --> installs fastapi.

uvicorn main:app --> to run our fastapi
uvicorn filename:fastAPI object
uvicorn main:app --reload --> auto reloads when changes are detected in code.
uvicorn app.main:app --reload if main file is inside app package.

We will use pydantic library to define schema.

put : changes all, needs to provide full data.
patch : updates only specific field.

fastapi can serialize lists to array(JSON arrays) to send data for get requests.
path parameter: parameter passed in our path for fetching specific data.
fastapi can validate our pathh parameter as well. e.g. we want id to be int.
routing in fastapi matches the first found match.
fastapi uses swagger UI for documentation.
we can do /docs or /redoc for auto generated doc or auto updated doc.

# Postgresql
- Postgres requires you to specify the name of the database to make a connection.
So, there needs to be one database. Thats why, it creates one default database named
'postgres' by default.

- We need a postgres driver to work with postgres in python.
- psycopg2 library will be used for this.
- These libaries also have functionality to sanitise the input.
- We shouldn't insert data from post directly into our database to prevent sql injection.

# ORMs Object Relational Mapping
- Instead of defining tables manually we can create tables as python models.
- No SQL is necessary.
- SQLAlchemy is a popular python ORMs.
- It needs a database driver to connect to it.
- We created our models in models.py file using SQLAlchemy.
-- Same TIMESTAMP library can be accessed from different sqlalchemy packages.

Schema/Pydantic Models define the structure of a request & response.
It ensure the proper structure of our data.
SqlAlchemy Models is for defining the columns of our posts table within postgres/
It is used to query, create, update, delete entrire in db.
Technically, we may not need pydantic models. We can be strict with data with this.

# JWT Token Authentication:-
Two Types of Authentication:
1. Session Based : Stored in database/api to track weather user is logged in.
2. JWT Token : data + secret key + algorithm

# Composite Key:
- User.id + Post.id. Unique combination of both of these columns.
- Ensures a user can like only one post

9:47

# Database Migration Tool:-
- Allows us to incrementally track changes to db schema and rollback changes at any point in time.
- Just like git but for db.
- Alembic can auto pull db models from SQLAlchemy and generate the proper tables.
- alembic init alembic(directory name)
- alembic revision -m "Revision Name"
-- then add upgrade and downgrade data in Revision
- alembic upgrade {revision} / {head}




